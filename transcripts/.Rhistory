'itong','what','nasa','sinasabi','just','kayo','lamang','nga','luchi',
'mismo','other','akin','kanya','ikaw','cannot','aking','ginawa',
'kanila','ginawa','know','really','sapagkat','din','maraming','they',
'meron','mong','uulitin','yon',
'yon','yo','tony','below','anyway','eto','aba','when','madam','amin',
'nandun','pagka','mahigit','senadora','sya','inyong','parang','salamat',
'senador','nagiging','yeah','look','how','goes','huwag','see','say',
'kang','actually','sinabi','about','mayor','already','nung','importante',
'oras','tama','here','very','into','pati','why','sabi','those','always',
'has','first','ganoon','atin','dalawang','kailangan','papaano','sabihin',
'nilang','hanggang','nating','from','siguro','tayong','naging','after',
'siya','namang','nagsabi','nang','lagi','niyo','grace','nagsasabi','nyo',
'pong','basta','dyan','iyan','pang','tayong','which','should','sino','these',
'without','di','yang','ilang','noon','noong','pag','senator','iyon','kong',
'mag','maging','nandiyan','nang','per','pumunta','iyan','let','muna','each',
'aming','sana','also','basta','ganito'))
prez = tm_map(prez, removePunctuation,preserve_intra_word_dashes=FALSE)
prez = tm_map(prez, stemDocument)
prez = tm_map(prez, stripWhitespace)
prez = tm_map(prez, removeNumbers)
prez = tm_map(prez, PlainTextDocument)
#make document term matrix
dtm = DocumentTermMatrix(prez)
#reassign row names (each row is a speaker)
rownames(dtm) = names(speakers)
#how many times was VP Jejomar Binay referred to by other candidates
binay_names = character()
if('binay' %in% colnames(dtm)){binay_names = c(binay_names, 'binay')}
if('jejomar' %in% colnames(dtm)){binay_names = c(binay_names, 'jejomar')}
if('vp' %in% colnames(dtm)){binay_names = c(binay_names, 'vp')}
if('vice president' %in% colnames(dtm)){binay_names = c(binay_names, 'vice president')}
dtm_binay = dtm[,binay_names]
BINAY = apply(dtm_binay, 1, sum)
#how many times was Mar Roxas referred to by other candidates
mar_names = character()
if('mar' %in% colnames(dtm)){mar_names = c(mar_names, 'mar')}
if('roxas' %in% colnames(dtm)){mar_names = c(mar_names, 'roxas')}
# if('secretary roxas' %in% colnames(dtm)){mar_names = c(mar_names, 'secretary roxas')}
if('secretary' %in% colnames(dtm)){mar_names = c(mar_names, 'secretary')}
#dtm_binay = dtm[,names]
dtm_mar = dtm[,mar_names]
MAR = apply(dtm_mar, 1, sum)
#how many times was Rodrigo Duterte referred to by other candidates
duterte_names = character()
if('mayor' %in% colnames(dtm)){duterte_names = c(duterte_names, 'mayor')}
if('duterte' %in% colnames(dtm)){duterte_names = c(duterte_names, 'duterte')}
# if('mayor duterte' %in% colnames(dtm)){duterte_names = c(duterte_names, 'mayor duterte')}
if('rudy' %in% colnames(dtm)){duterte_names = c(duterte_names, 'rudy')}
if('rodrigo' %in% colnames(dtm)){duterte_names = c(duterte_names, 'rodrigo')}
#dtm_binay = dtm[,names]
dtm_duterte = dtm[,duterte_names]
DUTERTE = apply(dtm_duterte, 1, sum)
#how many times was Sen. Miriam Defensor-Santiago referred to by other candidates
miriam_names = character()
if('santiago' %in% colnames(dtm)){miriam_names = c(miriam_names, 'santiago')}
if('miriam' %in% colnames(dtm)){miriam_names = c(miriam_names, 'miriam')}
#   if('senadora santiago' %in% colnames(dtm)){miriam_names = c(miriam_names, 'senadora santiago')}
#   if('senadora miriam' %in% colnames(dtm)){miriam_names = c(miriam_names, 'senadora miriam')}
#   if('senator santiago' %in% colnames(dtm)){miriam_names = c(miriam_names, 'senator santiago')}
#   if('senator miriam' %in% colnames(dtm)){miriam_names = c(miriam_names, 'senator miriam')}
#dtm_binay = dtm[,names]
dtm_miriam = dtm[,miriam_names]
MIRIAM = apply(dtm_miriam, 1, sum)
#how many times was Sen. Grace Poe referred to by other candidates
poe_names = character()
if('grace' %in% colnames(dtm)){poe_names = c(poe_names, 'grace')}
if('poe' %in% colnames(dtm)){poe_names = c(poe_names, 'poe')}
#   if('senadora grace poe' %in% colnames(dtm)){poe_names = c(poe_names, 'senadora grace poe')}
#   if('senator grace poe' %in% colnames(dtm)){poe_names = c(poe_names, 'senator grace poe')}
#dtm_binay = dtm[,names]
dtm_poe = dtm[,poe_names]
POE = apply(dtm_poe, 1, sum)
#summary matrix
data.frame(BINAY=BINAY, MAR=MAR, DUTERTE=DUTERTE, MIRIAM=MIRIAM, POE=POE)
}
dates = c(20160221,20160320)
ref_list = lapply(dates, ref_matrix)
names(ref_list) = dates
ref_list
binay = sapply(ref_list, function(df) sum(df[rownames(df) != 'BINAY', 'BINAY']))
the_rest = sapply(ref_list, function(df) sum(df[rownames(df) == 'MAR', 'DUTERTE'], df[rownames(df) == 'DUTERTE', 'MAR'],
df[rownames(df) == 'MAR', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'MAR'],
df[rownames(df) == 'MAR', 'POE'],df[rownames(df) == 'POE', 'MAR'],
df[rownames(df) == 'DUTERTE', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'DUTERTE'],
df[rownames(df) == 'DUTERTE', 'POE'],df[rownames(df) == 'POE', 'DUTERTE'],
df[rownames(df) == 'MIRIAM', 'POE'],df[rownames(df) == 'POE', 'MIRIAM']))
m = t(as.matrix(data.frame(binay, the_rest)))
m
barplot(m,main='NUmber of times the other candidates mention Binay vs each other',
beside=TRUE,col=c('darkblue','red'),
#legend=c('# of times the other candidates mention Binay','# of times the other candidates mention each other'),
legend.text = FALSE)
binay_mar = sapply(ref_list, function(df) sum(df[rownames(df) == 'MAR', 'BINAY']))
binay_mar
poe_binay = sapply(ref_list, function(df) sum(df[rownames(df) == 'POE', 'BINAY']))
poe_binay
mar = sapply(ref_list, function(df) sum(df[rownames(df) != 'MAR', 'MAR']))
the_rest = sapply(ref_list, function(df) sum(df[rownames(df) == 'BINAY', 'DUTERTE'], df[rownames(df) == 'DUTERTE', 'BINAY'],
df[rownames(df) == 'BINAY', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'BINAY'],
df[rownames(df) == 'BINAY', 'POE'],df[rownames(df) == 'POE', 'BINAY'],
df[rownames(df) == 'DUTERTE', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'DUTERTE'],
df[rownames(df) == 'DUTERTE', 'POE'],df[rownames(df) == 'POE', 'DUTERTE'],
df[rownames(df) == 'MIRIAM', 'POE'],df[rownames(df) == 'POE', 'MIRIAM']))
n = t(as.matrix(data.frame(mar, the_rest)))
n
barplot(n,main='NUmber of times the other candidates mention Mar vs each other',
beside=TRUE,col=c('darkblue','red'),
#legend=c('# of times the other candidates mention Mar','# of times the other candidates mention each other'),
legend.text = FALSE)
mar_binay = sapply(ref_list, function(df) sum(df[rownames(df) == 'BINAY', 'MAR']))
# 20160221 20160320
# 2        3
mar_duterte = sapply(ref_list, function(df) sum(df[rownames(df) == 'DUTERTE', 'MAR']))
# 20160221 20160320
# 0        4
mar_poe = sapply(ref_list, function(df) sum(df[rownames(df) == 'POE', 'MAR']))
# 20160221 20160320
# 1        7
mar_miriam = sapply(ref_list, function(df) sum(df[rownames(df) == 'MIRIAM', 'MAR']))
mar_binay
mar_duterte
mar_poe
mar_miriam
duterte = sapply(ref_list, function(df) sum(df[rownames(df) != 'DUTERTE', 'DUTERTE']))
the_rest = sapply(ref_list, function(df) sum(df[rownames(df) == 'BINAY', 'MAR'], df[rownames(df) == 'MAR', 'BINAY'],
df[rownames(df) == 'BINAY', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'BINAY'],
df[rownames(df) == 'BINAY', 'POE'],df[rownames(df) == 'POE', 'BINAY'],
df[rownames(df) == 'MAR', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'MAR'],
df[rownames(df) == 'MAR', 'POE'],df[rownames(df) == 'POE', 'MAR'],
df[rownames(df) == 'MIRIAM', 'POE'],df[rownames(df) == 'POE', 'MIRIAM']))
o = t(as.matrix(data.frame(duterte, the_rest)))
o
beside=TRUE,col=c('darkblue','red'),
#legend=c('# of times the other candidates mention Duterte','# of times the other candidates mention each other'),
legend.text = FALSE)
barplot(o,main='NUmber of times the other candidates mention Duterte vs each other',
beside=TRUE,col=c('darkblue','red'),
#legend=c('# of times the other candidates mention Duterte','# of times the other candidates mention each other'),
legend.text = FALSE)
poe = sapply(ref_list, function(df) sum(df[rownames(df) != 'POE', 'POE']))
the_rest = sapply(ref_list, function(df) sum(df[rownames(df) == 'BINAY', 'MAR'], df[rownames(df) == 'MAR', 'BINAY'],
df[rownames(df) == 'BINAY', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'BINAY'],
df[rownames(df) == 'BINAY', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'BINAY'],
df[rownames(df) == 'MAR', 'MIRIAM'],df[rownames(df) == 'MIRIAM', 'MAR'],
df[rownames(df) == 'MAR', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'MAR'],
df[rownames(df) == 'MIRIAM', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'MIRIAM']))
p = t(as.matrix(data.frame(poe, the_rest)))
p
miriam = sapply(ref_list, function(df) sum(df[rownames(df) != 'MIRIAM', 'MIRIAM']))
the_rest = sapply(ref_list, function(df) sum(df[rownames(df) == 'BINAY', 'MAR'], df[rownames(df) == 'MAR', 'BINAY'],
df[rownames(df) == 'BINAY', 'POE'],df[rownames(df) == 'POE', 'BINAY'],
df[rownames(df) == 'BINAY', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'BINAY'],
df[rownames(df) == 'MAR', 'POE'],df[rownames(df) == 'POE', 'MAR'],
df[rownames(df) == 'MAR', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'MAR'],
df[rownames(df) == 'POE', 'DUTERTE'],df[rownames(df) == 'DUTERTE', 'POE']))
q = t(as.matrix(data.frame(miriam, the_rest)))
q
dates = c(20160221,20160320)
#collect all the transcripts in a single character string
read_transcript = function(date){scan(paste0('debate_', date, '_full', '.txt'), what='x', quote=NULL)}
#read and collate all transcripts
text = unlist(sapply(dates, read_transcript))
text
speakers =
c(  BINAY    = '',
MAR   = '',
DUTERTE  = '',
MIRIAM  = '',
POE = ''
)
for(word in text){
#if word ends with :
if(substr(word,nchar(word),nchar(word))==':'){
#if word corresponds to one of the speakers of interest
if(word %in% paste0(names(speakers), ':')){
#set current speaker
currentSpeaker = substr(word,1,nchar(word)-1)
}
else{
#if the current speaker is not one of the speakers of interest, set it to NA
currentSpeaker = NA
}
}
else if(!is.na(currentSpeaker)){
#if the current speaker is of interest, save what he is saying
speakers[currentSpeaker] = paste(speakers[currentSpeaker], word)
}
}
inspect(dtm)#visualize the document-term matrix
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = tm_map(prez, removeWords, c('laughter', 'applause', 'intermission', 'and', 'the', 'all',
'ang','mga','you','hindi','that','kung','ating','said','naman',
'namin','natin','yung','pero','sila','nila','ako','yan','para',
'will','isang','ito','doon','alam','may','kanilang','dahil',
'lahat','have','tayo','kami','for','because','rin','ngayon',
'kaya','kaya','hong','walang','but','kahit','dapat','lang',
'mas','pwedeng','saan','yong','buong','yong','ayaw','lang',
'not','wala','there','are','was','would','ano','well','can',
'kasi','dito','our','akong','with','dun','gusto','ninyo',
'bakit','niya','like','ibang','talagang','did','yes','yun','this',
'anong','man','diyan','tulad','pwede','talaga','give','bilang','isa',
'itong','what','nasa','sinasabi','just','kayo','lamang','nga','luchi',
'mismo','other','akin','kanya','ikaw','cannot','aking','ginawa',
'kanila','ginawa','know','really','sapagkat','din','maraming','they',
'meron','roxas','duterte','poe','mar','miriam',
'mong','uulitin','yon','yo','tony','below','anyway','eto','aba',
'when','madam','amin','nandun','pagka','mahigit','senadora','sya',
'inyong','parang','salamat','nagiging','yeah','look','how','goes','huwag','see','say',
'kang','actually','sinabi','about','already','nung','importante',
'oras','tama','here','very','into','pati','why','sabi','those','always',
'has','first','ganoon','atin','dalawang','kailangan','papaano','sabihin',
'nilang','hanggang','nating','from','siguro','tayong','naging','after',
'siya','namang','nagsabi','nang','lagi','niyo','grace','nagsasabi','nyo',
'pong','basta','dyan','iyan','pang','tayong','which','should','sino','these',
'without','di','yang','ilang','noon','noong','pag','iyon','kong',
'mag','maging','nandiyan','nang','per','pumunta','iyan','let','muna','each',
'aming','sana','also','basta','ganito'))
prez = tm_map(prez, removePunctuation,preserve_intra_word_dashes=FALSE)
prez = tm_map(prez, stemDocument)
prez = tm_map(prez, stripWhitespace)
prez = tm_map(prez, removeNumbers)
prez = tm_map(prez, PlainTextDocument)
#make document term matrix
dtm = DocumentTermMatrix(prez)
#reassign row names (each row is a speaker)
rownames(dtm) = names(speakers)
inspect(dtm)#visualize the document-term matrix
indexes = apply(dtm, 1, function(v) head(order(v, decreasing=TRUE), 100))
# find the 100 most frequent words
freq_words = apply(indexes, 2, function(v) colnames(dtm)[v])
freq_words
word_count_freq = apply(freq_words, c(1,2), function(x) sum(x == freq_words))
#
unique_words_freq = word_count_freq >= 1
l_freq = lapply(colnames(freq_words), function(name) freq_words[unique_words_freq[,name], name])
names(l_freq) = colnames(freq_words)
l_freq
freq = dtm['BINAY', l_freq$BINAY]
wordcloud(l_freq$BINAY, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Blues'))
freq = dtm['DUTERTE', l_freq$DUTERTE]
wordcloud(l_freq$DUTERTE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Greens'))
freq = dtm['POE', l_freq$POE]
wordcloud(l_freq$POE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Oranges'))
inspect(freq)
freq = dtm['MAR', l_freq$MAR]
wordcloud(l_freq$MAR, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Greens'))
inspect(freq)
freq = dtm['MIRIAM', l_freq$MIRIAM]
wordcloud(l_freq$MIRIAM, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Blues'))
inspect(freq)
word_count = apply(freq_words, c(1,2), function(x) sum(x == freq_words))
#keep those words that appear only once
unique_words = word_count == 1
l = lapply(colnames(freq_words), function(name) freq_words[unique_words[,name], name])
names(l) = colnames(freq_words)
l
nb_words = apply(dtm, 1, sum)
nb_words
word_lengths = sapply(colnames(dtm), nchar)
#transform word count into total character count matrix
character_counts = t(apply(dtm, 1, function(v) v * word_lengths))
#total character count by speaker
total_character_counts = apply(character_counts, 1, function(v) sum(v))
#divide total character count by numer of words
round(total_character_counts / nb_words, digits=1)
apply(dtm, 1, function(v) round(sum(v != 0)/sum(v)*1000, digits=1))
barplot(m,main='NUmber of times the other candidates mention Binay vs each other',
beside=TRUE,col=c('darkblue','blue'),
#legend=c('# of times the other candidates mention Binay','# of times the other candidates mention each other'),
legend.text = FALSE)
barplot(m,main='NUmber of times the other candidates mention Binay vs each other',
beside=TRUE,col=c('darkblue','lightblue'),
#legend=c('# of times the other candidates mention Binay','# of times the other candidates mention each other'),
legend.text = FALSE)
barplot(n,main='NUmber of times the other candidates mention Mar vs each other',
beside=TRUE,col=c('darkblue','lightblue'),
#legend=c('# of times the other candidates mention Mar','# of times the other candidates mention each other'),
legend.text = FALSE)
barplot(o,main='NUmber of times the other candidates mention Duterte vs each other',
beside=TRUE,col=c('darkblue','lightblue'),
#legend=c('# of times the other candidates mention Duterte','# of times the other candidates mention each other'),
legend.text = FALSE)
install.packages(rmarkdown)
install.packages(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
dates = c(20160221)
#collect all the transcripts in a single character string
read_transcript = function(date){scan(paste0('debate_', date, '_full', '.txt'), what='x', quote=NULL)}
#read and collate all transcripts
text = unlist(sapply(dates, read_transcript))
speakers =
c(  BINAY    = '',
MAR   = '',
DUTERTE  = '',
MIRIAM  = '',
POE = ''
)
#assign text to the right speaker
for(word in text){
#if word ends with :
if(substr(word,nchar(word),nchar(word))==':'){
#if word corresponds to one of the speakers of interest
if(word %in% paste0(names(speakers), ':')){
#set current speaker
currentSpeaker = substr(word,1,nchar(word)-1)
}
else{
#if the current speaker is not one of the speakers of interest, set it to NA
currentSpeaker = NA
}
}
else if(!is.na(currentSpeaker)){
#if the current speaker is of interest, save what he is saying
speakers[currentSpeaker] = paste(speakers[currentSpeaker], word)
}
}
#preprocess text
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = tm_map(prez, removeWords, c('laughter', 'applause', 'intermission', 'and', 'the', 'all',
'ang','mga','you','hindi','that','kung','ating','said','naman',
'namin','natin','yung','pero','sila','nila','ako','yan','para',
'will','isang','ito','doon','alam','may','kanilang','dahil',
'lahat','have','tayo','kami','for','because','rin','ngayon',
'kaya','kaya','hong','walang','but','kahit','dapat','lang',
'mas','pwedeng','saan','yong','buong','yong','ayaw','lang',
'not','wala','there','are','was','would','ano','well','can',
'kasi','dito','our','akong','with','dun','gusto','ninyo',
'bakit','niya','like','ibang','talagang','did','yes','yun','this',
'anong','man','diyan','tulad','pwede','talaga','give','bilang','isa',
'itong','what','nasa','sinasabi','just','kayo','lamang','nga','luchi',
'mismo','other','akin','kanya','ikaw','cannot','aking','ginawa',
'kanila','ginawa','know','really','sapagkat','din','maraming','they',
'meron','roxas','duterte','poe','mar','miriam',
'mong','uulitin','yon','yo','tony','below','anyway','eto','aba',
'when','madam','amin','nandun','pagka','mahigit','senadora','sya',
'inyong','parang','salamat','nagiging','yeah','look','how','goes','huwag','see','say',
'kang','actually','sinabi','about','already','nung','importante',
'oras','tama','here','very','into','pati','why','sabi','those','always',
'has','first','ganoon','atin','dalawang','kailangan','papaano','sabihin',
'nilang','hanggang','nating','from','siguro','tayong','naging','after',
'siya','namang','nagsabi','nang','lagi','niyo','grace','nagsasabi','nyo',
'pong','basta','dyan','iyan','pang','tayong','which','should','sino','these',
'without','di','yang','ilang','noon','noong','pag','iyon','kong',
'mag','maging','nandiyan','nang','per','pumunta','iyan','let','muna','each',
'aming','sana','also','basta','ganito'))
prez = tm_map(prez, removePunctuation,preserve_intra_word_dashes=FALSE)
prez = tm_map(prez, stemDocument)
prez = tm_map(prez, stripWhitespace)
prez = tm_map(prez, removeNumbers)
prez = tm_map(prez, PlainTextDocument)
#make document term matrix
dtm = DocumentTermMatrix(prez)
#reassign row names (each row is a speaker)
rownames(dtm) = names(speakers)
inspect(dtm)#visualize the document-term matrix
indexes = apply(dtm, 1, function(v) head(order(v, decreasing=TRUE), 100))
# find the 100 most frequent words
freq_words = apply(indexes, 2, function(v) colnames(dtm)[v])
freq_words
word_count_freq = apply(freq_words, c(1,2), function(x) sum(x == freq_words))
#
unique_words_freq = word_count_freq >= 1
l_freq = lapply(colnames(freq_words), function(name) freq_words[unique_words_freq[,name], name])
names(l_freq) = colnames(freq_words)
l_freq
freq = dtm['BINAY', l_freq$BINAY]
wordcloud(l_freq$BINAY, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Blues'))
inspect(freq)
freq = dtm['DUTERTE', l_freq$DUTERTE]
wordcloud(l_freq$DUTERTE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Greens'))
freq = dtm['POE', l_freq$POE]
wordcloud(l_freq$POE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Oranges'))
freq = dtm['MAR', l_freq$MAR]
wordcloud(l_freq$MAR, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Greens'))
freq = dtm['MIRIAM', l_freq$MIRIAM]
wordcloud(l_freq$MIRIAM, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Blues'))
dates = c(20160320)
#collect all the transcripts in a single character string
read_transcript = function(date){scan(paste0('debate_', date, '_full', '.txt'), what='x', quote=NULL)}
#read and collate all transcripts
text = unlist(sapply(dates, read_transcript))
speakers =
c(  BINAY    = '',
MAR   = '',
DUTERTE  = '',
MIRIAM  = '',
POE = ''
)
#assign text to the right speaker
for(word in text){
#if word ends with :
if(substr(word,nchar(word),nchar(word))==':'){
#if word corresponds to one of the speakers of interest
if(word %in% paste0(names(speakers), ':')){
#set current speaker
currentSpeaker = substr(word,1,nchar(word)-1)
}
else{
#if the current speaker is not one of the speakers of interest, set it to NA
currentSpeaker = NA
}
}
else if(!is.na(currentSpeaker)){
#if the current speaker is of interest, save what he is saying
speakers[currentSpeaker] = paste(speakers[currentSpeaker], word)
}
}
#preprocess text
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = Corpus(VectorSource(speakers))
prez = tm_map(prez, tolower)
prez = tm_map(prez, removeWords,stopwords('english'))
#remove additional unwanted words
prez = tm_map(prez, removeWords, c('laughter', 'applause', 'intermission', 'and', 'the', 'all',
'ang','mga','you','hindi','that','kung','ating','said','naman',
'namin','natin','yung','pero','sila','nila','ako','yan','para',
'will','isang','ito','doon','alam','may','kanilang','dahil',
'lahat','have','tayo','kami','for','because','rin','ngayon',
'kaya','kaya','hong','walang','but','kahit','dapat','lang',
'mas','pwedeng','saan','yong','buong','yong','ayaw','lang',
'not','wala','there','are','was','would','ano','well','can',
'kasi','dito','our','akong','with','dun','gusto','ninyo',
'bakit','niya','like','ibang','talagang','did','yes','yun','this',
'anong','man','diyan','tulad','pwede','talaga','give','bilang','isa',
'itong','what','nasa','sinasabi','just','kayo','lamang','nga','luchi',
'mismo','other','akin','kanya','ikaw','cannot','aking','ginawa',
'kanila','ginawa','know','really','sapagkat','din','maraming','they',
'meron','roxas','duterte','poe','mar','miriam',
'mong','uulitin','yon','yo','tony','below','anyway','eto','aba',
'when','madam','amin','nandun','pagka','mahigit','senadora','sya',
'inyong','parang','salamat','nagiging','yeah','look','how','goes','huwag','see','say',
'kang','actually','sinabi','about','already','nung','importante',
'oras','tama','here','very','into','pati','why','sabi','those','always',
'has','first','ganoon','atin','dalawang','kailangan','papaano','sabihin',
'nilang','hanggang','nating','from','siguro','tayong','naging','after',
'siya','namang','nagsabi','nang','lagi','niyo','grace','nagsasabi','nyo',
'pong','basta','dyan','iyan','pang','tayong','which','should','sino','these',
'without','di','yang','ilang','noon','noong','pag','iyon','kong',
'mag','maging','nandiyan','nang','per','pumunta','iyan','let','muna','each',
'aming','sana','also','basta','ganito'))
prez = tm_map(prez, removePunctuation,preserve_intra_word_dashes=FALSE)
prez = tm_map(prez, stemDocument)
prez = tm_map(prez, stripWhitespace)
prez = tm_map(prez, removeNumbers)
prez = tm_map(prez, PlainTextDocument)
#make document term matrix
dtm = DocumentTermMatrix(prez)
#reassign row names (each row is a speaker)
rownames(dtm) = names(speakers)
indexes = apply(dtm, 1, function(v) head(order(v, decreasing=TRUE), 100))
# find the 100 most frequent words
freq_words = apply(indexes, 2, function(v) colnames(dtm)[v])
freq_words
word_count_freq = apply(freq_words, c(1,2), function(x) sum(x == freq_words))
#
unique_words_freq = word_count_freq >= 1
l_freq = lapply(colnames(freq_words), function(name) freq_words[unique_words_freq[,name], name])
names(l_freq) = colnames(freq_words)
l_freq
freq = dtm['BINAY', l_freq$BINAY]
wordcloud(l_freq$BINAY, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Blues'))
freq = dtm['DUTERTE', l_freq$DUTERTE]
wordcloud(l_freq$DUTERTE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15,colors=brewer.pal(9,'Greens'))
freq = dtm['POE', l_freq$POE]
wordcloud(l_freq$POE, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Oranges'))
freq = dtm['MAR', l_freq$MAR]
wordcloud(l_freq$MAR, as.vector(freq),random.order=FALSE,scale=c(2,.1),
rot.per=.15, colors=brewer.pal(9,'Greens'))
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages('rmarkdown')
getwd()
